#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct node {
    char usn[20], name[50], branch[10];
    int sem;
    unsigned long long int phno;
    struct node* link;
};

struct node* first = NULL, * last = NULL, * temp = NULL, * p;
int count = 0;

void create();
void insert_front();
void insert_rear();
void display();
void delete_front();
void delete_rear();

int main() {
    int ch, n, i;
    while (1) {
        printf("1. Create SLL 2. Insert at front 3. Insert at rear 4. Display 5. Delete at front 6. Delete at rear 7. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &ch);
        switch (ch) {
        case 1:
            printf("Enter the number of students: ");
            scanf("%d", &n);
            for (i = 1; i <= n; i++)
                insert_front();
            break;
        case 2:
            insert_front();
            break;
        case 3:
            insert_rear();
            break;
        case 4:
            display();
            break;
        case 5:
            delete_front();
            break;
        case 6:
            delete_rear();
            break;
        case 7:
            exit(0);
        default:
            printf("Invalid choice\n");
            break;
        }
    }
    return 0;
}

void create() {
    char usn[20], name[50], branch[10];
    int sem;
    unsigned long long int phno;
    temp = (struct node*)malloc(sizeof(struct node));
    printf("Enter USN, Name, Branch, Sem, Phone Number: ");
    scanf("%s %s %s %d %llu", usn, name, branch, &sem, &phno);
    strcpy(temp->usn, usn);
    strcpy(temp->name, name);
    strcpy(temp->branch, branch);
    temp->sem = sem;
    temp->phno = phno;
    count++;
}

void insert_front() {
    if (first == NULL) {
        create();
        temp->link = NULL;
        first = temp;
        last = temp;
    } else {
        create();
        temp->link = first;
        first = temp;
    }
}

void insert_rear() {
    if (first == NULL) {
        create();
        temp->link = NULL;
        first = temp;
        last = temp;
    } else {
        create();
        temp->link = NULL;
        last->link = temp;
        last = temp;
    }
}

void display() {
    if (first == NULL) {
        printf("List is empty\n");
    } else {
        p = first;
        printf("Contents of list:\n");
        while (p != NULL) {
            printf("%s\t%s\t%s\t%d\t%llu\n", p->usn, p->name, p->branch, p->sem, p->phno);
            p = p->link;
        }
        printf("Total number of students: %d\n", count);
    }
}

void delete_front() {
    p = first;
    if (first == NULL) {
        printf("List is empty\n");
    } else if (p->link == NULL) {
        printf("Deleted node: %s\t%s\t%s\t%d\t%llu\n", p->usn, p->name, p->branch, p->sem, p->phno);
        free(p);
        first = NULL;
        count--;
    } else {
        first = p->link;
        printf("Deleted node: %s\t%s\t%s\t%d\t%llu\n", p->usn, p->name, p->branch, p->sem, p->phno);
        free(p);
        count--;
    }
}

void delete_rear() {
    p = first;
    if (first == NULL) {
        printf("List is empty\n");
    } else if (p->link == NULL) {
        printf("Deleted node: %s\t%s\t%s\t%d\t%llu\n", p->usn, p->name, p->branch, p->sem, p->phno);
        free(p);
        first = NULL;
        count--;
    } else {
        while (p->link != last) {
            p = p->link;
        }
        printf("Deleted node: %s\t%s\t%s\t%d\t%llu\n", last->usn, last->name, last->branch, last->sem, last->phno);
        free(last);
        p->link = NULL;
        last = p;
        count--;
    }
}
